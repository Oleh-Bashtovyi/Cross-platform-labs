// <auto-generated />
using System;
using Lab6.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lab6.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241115214820_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lab6.Models.Dive", b =>
                {
                    b.Property<Guid>("DiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DiveSiteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiverId")
                        .HasColumnType("uuid");

                    b.Property<bool>("NightDiveYn")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DiveId");

                    b.HasIndex("DiveSiteId");

                    b.HasIndex("DiverId");

                    b.ToTable("Dives");
                });

            modelBuilder.Entity("Lab6.Models.DiveOrganisation", b =>
                {
                    b.Property<string>("OrganisationCode")
                        .HasColumnType("text");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganisationDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrganisationCode");

                    b.ToTable("DiveOrganisations");
                });

            modelBuilder.Entity("Lab6.Models.DiveSite", b =>
                {
                    b.Property<Guid>("DiveSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DiveSiteCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiveSiteDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiveSiteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DiveSiteId");

                    b.HasIndex("DiveSiteCode");

                    b.ToTable("DiveSites");
                });

            modelBuilder.Entity("Lab6.Models.DiveSiteType", b =>
                {
                    b.Property<string>("DiveSiteCode")
                        .HasColumnType("text");

                    b.Property<string>("DiveSiteDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DiveSiteCode");

                    b.ToTable("DiveSiteTypes");
                });

            modelBuilder.Entity("Lab6.Models.Diver", b =>
                {
                    b.Property<Guid>("DiverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DiverDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DiverId");

                    b.ToTable("Divers");
                });

            modelBuilder.Entity("Lab6.Models.DiverCertification", b =>
                {
                    b.Property<Guid>("DiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("CertificationCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CertificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InstructionLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstructorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DiverId", "CertificationCode");

                    b.HasIndex("CertificationCode");

                    b.ToTable("DiverCertifications");
                });

            modelBuilder.Entity("Lab6.Models.LevelOfCertification", b =>
                {
                    b.Property<string>("CertificationCode")
                        .HasColumnType("text");

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganisationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CertificationCode");

                    b.HasIndex("OrganisationCode");

                    b.ToTable("LevelsOfCertification");
                });

            modelBuilder.Entity("Lab6.Models.Wreck", b =>
                {
                    b.Property<Guid>("DiveSiteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("WreckDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WreckDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DiveSiteId");

                    b.ToTable("Wrecks");
                });

            modelBuilder.Entity("Lab6.Models.Dive", b =>
                {
                    b.HasOne("Lab6.Models.DiveSite", "DiveSite")
                        .WithMany("Dives")
                        .HasForeignKey("DiveSiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Diver", "Diver")
                        .WithMany("Dives")
                        .HasForeignKey("DiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiveSite");

                    b.Navigation("Diver");
                });

            modelBuilder.Entity("Lab6.Models.DiveSite", b =>
                {
                    b.HasOne("Lab6.Models.DiveSiteType", "DiveSiteType")
                        .WithMany("DiveSites")
                        .HasForeignKey("DiveSiteCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiveSiteType");
                });

            modelBuilder.Entity("Lab6.Models.DiverCertification", b =>
                {
                    b.HasOne("Lab6.Models.LevelOfCertification", "Certification")
                        .WithMany("DiverCertifications")
                        .HasForeignKey("CertificationCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Diver", "Diver")
                        .WithMany("Certifications")
                        .HasForeignKey("DiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Diver");
                });

            modelBuilder.Entity("Lab6.Models.LevelOfCertification", b =>
                {
                    b.HasOne("Lab6.Models.DiveOrganisation", "DiveOrganisation")
                        .WithMany("Certifications")
                        .HasForeignKey("OrganisationCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiveOrganisation");
                });

            modelBuilder.Entity("Lab6.Models.Wreck", b =>
                {
                    b.HasOne("Lab6.Models.DiveSite", "DiveSite")
                        .WithOne("Wreck")
                        .HasForeignKey("Lab6.Models.Wreck", "DiveSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiveSite");
                });

            modelBuilder.Entity("Lab6.Models.DiveOrganisation", b =>
                {
                    b.Navigation("Certifications");
                });

            modelBuilder.Entity("Lab6.Models.DiveSite", b =>
                {
                    b.Navigation("Dives");

                    b.Navigation("Wreck")
                        .IsRequired();
                });

            modelBuilder.Entity("Lab6.Models.DiveSiteType", b =>
                {
                    b.Navigation("DiveSites");
                });

            modelBuilder.Entity("Lab6.Models.Diver", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("Dives");
                });

            modelBuilder.Entity("Lab6.Models.LevelOfCertification", b =>
                {
                    b.Navigation("DiverCertifications");
                });
#pragma warning restore 612, 618
        }
    }
}
